using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Text;
using System.Text.RegularExpressions;

[Generator]
public class ContractCopyGenerator : ISourceGenerator
{
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForSyntaxNotifications(() => new SyntaxReceiver());
    }

    public void Execute(GeneratorExecutionContext context)
    {
        if (context.SyntaxReceiver is not SyntaxReceiver receiver)
            return;

        foreach (var candidate in receiver.Candidates)
        {
            var semanticModel = context.Compilation.GetSemanticModel(candidate.SyntaxTree);
            if (semanticModel.GetDeclaredSymbol(candidate) is not INamedTypeSymbol targetSymbol)
                continue;

            var attr = targetSymbol.GetAttributes()
                .FirstOrDefault(x => x.AttributeClass?.ToDisplayString() == "ContractFromAttribute");
            if (attr == null) continue;

            if (attr.ConstructorArguments[0].Value is not INamedTypeSymbol contractSymbol)
                continue;

            // 원본 클래스 구문
            var contractSyntaxRef = contractSymbol.DeclaringSyntaxReferences.FirstOrDefault();
            if (contractSyntaxRef == null) continue;

            var contractClass = contractSyntaxRef.GetSyntax() as ClassDeclarationSyntax;
            if (contractClass == null) continue;

            var contractTree = contractSyntaxRef.SyntaxTree;
            var contractRoot = contractTree.GetCompilationUnitRoot();

            // using 구문 복사 및 Contract → ApiModel 치환
            var usingTexts = new StringBuilder();
            foreach (var usingDirective in contractRoot.Usings)
            {
                var text = usingDirective.ToFullString();

                text = Regex.Replace(text, @"\bContract\b", "ApiModel");
                
                usingTexts.AppendLine(text.Trim());
            }

            // 클래스 구문 partial 강제
            var partialClass = contractClass
                .WithModifiers(SyntaxFactory.TokenList(
                    SyntaxFactory.Token(SyntaxKind.PublicKeyword),
                    SyntaxFactory.Token(SyntaxKind.PartialKeyword)))
                .NormalizeWhitespace();

            var sb = new StringBuilder();
            sb.AppendLine("// <auto-generated />");
            sb.Append(usingTexts.ToString());
            sb.AppendLine($"namespace {targetSymbol.ContainingNamespace};");
            sb.AppendLine();
            sb.AppendLine(partialClass.ToFullString());

            context.AddSource($"{targetSymbol.Name}_contractcopy.g.cs", sb.ToString());
        }
    }

    class SyntaxReceiver : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> Candidates { get; } = new();

        public void OnVisitSyntaxNode(SyntaxNode node)
        {
            if (node is ClassDeclarationSyntax cds && cds.AttributeLists.Count > 0)
                Candidates.Add(cds);
        }
    }
}
